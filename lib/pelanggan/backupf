Future<void> simpanPenjualan() async {
  if (selectedProduk == 0 || jumlahProduk <= 0 || selectedPelanggan == 0) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Pilih produk, jumlah yang valid, dan pelanggan')),
    );
    return;
  }

  if (jumlahProduk > stokTersedia) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Stok produk tidak cukup')),
    );
    return;
  }

  final produk = produkList.firstWhere((p) => p['produkid'] == selectedProduk);
  subtotal = produk['harga'] * jumlahProduk;

  try {
    // Simpan data penjualan
    final response = await supabase.from('penjualan').insert({
      'totalharga': subtotal,
      'pelangganid': selectedPelanggan,
      'tanggalpenjualan': tanggalTransaksi.toIso8601String(),
    }).select();

    if (response == null || response.isEmpty) {
      throw Exception('Gagal menyimpan data penjualan');
    }

    final penjualanId = response[0]['penjualanid'];
    
    final detailResponse = await supabase.from('detailpenjualan').insert({
      'penjualanid': penjualanId,
      'produkid': selectedProduk,
      'jumlahproduk': jumlahProduk,
      'subtotal': subtotal,
    }).select();

    if (detailResponse == null || detailResponse.isEmpty) {
      throw Exception('Gagal menyimpan detail penjualan');
    }

    
    final updateResponse = await supabase.from('produk').update({
      'stok': stokTersedia - jumlahProduk,
    }).eq('produkid', selectedProduk);

    if (updateResponse == null || updateResponse.isEmpty) {
      throw Exception('Gagal mengupdate stok produk');
    }

    /
    Navigator.pop(context);
  } catch (e) {
    print('Error simpan penjualan: $e');
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Terjadi kesalahan saat menyimpan penjualan: $e')),
    );
  }
}
